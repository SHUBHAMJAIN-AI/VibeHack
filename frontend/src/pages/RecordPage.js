import React, { useState, useRef } from 'react';
import {
  Container,
  Box,
  Button,
  Typography,
  CircularProgress,
  Alert,
  Snackbar,
  Paper,
} from '@mui/material';
import {
  Mic,
  Stop,
} from '@mui/icons-material';
import axios from 'axios';

const API_URL = 'http://localhost:8001';

function RecordPage() {
  const [isRecording, setIsRecording] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [story, setStory] = useState(null);
  const mediaRecorderRef = useRef(null);
  const chunksRef = useRef([]);

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorderRef.current = new MediaRecorder(stream);
      chunksRef.current = [];

      mediaRecorderRef.current.ondataavailable = (e) => {
        chunksRef.current.push(e.data);
      };

      mediaRecorderRef.current.onstop = async () => {
        const audioBlob = new Blob(chunksRef.current, { type: 'audio/webm' });
        await handleAudioUpload(audioBlob);
      };

      mediaRecorderRef.current.start();
      setIsRecording(true);
      setError(null);
    } catch (err) {
      console.error('Error accessing microphone:', err);
      setError('Error accessing microphone. Please make sure you have granted microphone permissions.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const handleAudioUpload = async (audioBlob) => {
    setLoading(true);
    setError(null);
    try {
      const formData = new FormData();
      formData.append('file', audioBlob, 'recording.webm');

      const response = await axios.post(`${API_URL}/upload-audio`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      // Create a story object with the required fields
      const storyData = {
        id: "",  // This will be generated by the backend
        text: response.data.text,
        enhanced_text: "",  // This will be generated by the backend
        created_at: new Date().toISOString(),
        reactions: {
          funny: 0,
          happy: 0,
          emotional: 0
        }
      };

      const enhancedStory = await axios.post(`${API_URL}/enhance-story`, storyData);

      setStory(enhancedStory.data);
    } catch (err) {
      console.error('Error processing audio:', err);
      const errorMessage = err.response?.data?.detail || 'Error processing audio. Please try again.';
      setError(typeof errorMessage === 'string' ? errorMessage : 'Error processing audio. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleCloseError = () => {
    setError(null);
  };

  return (
    <Container maxWidth="md">
      <Box sx={{ my: 4, textAlign: 'center' }}>
        <Typography variant="h3" component="h1" gutterBottom>
          Record Your Story
        </Typography>
        
        <Box sx={{ my: 2 }}>
          <Button
            variant="contained"
            color={isRecording ? 'error' : 'primary'}
            startIcon={isRecording ? <Stop /> : <Mic />}
            onClick={isRecording ? stopRecording : startRecording}
            disabled={loading}
          >
            {isRecording ? 'Stop Recording' : 'Start Recording'}
          </Button>
        </Box>

        {loading && (
          <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}>
            <CircularProgress />
          </Box>
        )}

        <Snackbar 
          open={!!error} 
          autoHideDuration={6000} 
          onClose={handleCloseError}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        >
          <Alert onClose={handleCloseError} severity="error" sx={{ width: '100%' }}>
            {error}
          </Alert>
        </Snackbar>

        {story && (
          <Paper elevation={3} sx={{ p: 3, mt: 4 }}>
            <Typography variant="h5" gutterBottom>
              Your Story
            </Typography>
            
            <Typography variant="h6" gutterBottom>
              Original Version
            </Typography>
            <Typography paragraph>{story.text}</Typography>
            
            <Typography variant="h6" gutterBottom>
              Enhanced Version
            </Typography>
            <Typography paragraph>{story.enhanced_text}</Typography>
          </Paper>
        )}
      </Box>
    </Container>
  );
}

export default RecordPage; 